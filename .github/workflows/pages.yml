# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Generate updated Allure report

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["trunk"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      newest_allure_results:
        required: true

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true
  
env:
  REPORT_PATH: ${{ github.workspace }}/docs/report
  LATEST_RESULT: ${{github.event.inputs.newest_allure_results}}
  
jobs:
  generate_allure_report:
    name: Generate Pre-Release Allure reports
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ github.token }}
      
    steps:
      - name: Install allure-commandline package
        run: npm install -g allure-commandline
      
      - name: Checkout this repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: 'trunk'
          
      - name: Locate newest Allure results
        working-directory: data/
        run: |
          # LATEST_RESULT=$(ls -F | cut -d_ -f3 | sort -n | tail -1)
          echo "LATEST_ALLURE_RESULT=$(ls -F | cut -d_ -f3 | sort -n | tail -1)" >> $GITHUB_ENV
          
      - name: Generate report with history
        working-directory: scripts/
        env:
          ALLURE_RESULTS_DATA_BASE_PATH: ${{github.workspace}}/data
        run: bash regenerate-report.sh
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload the generated report
          path: ${{env.REPORT_PATH}}

#       - name: Push changes to trunk
#         uses: EndBug/add-and-commit@v9 # You can change this to use a specific version.
#         env:
#           BOT_COMMIT_MESSAGE: "regenerated report using data from run ${{env.LATEST_ALLURE_RESULT}}"
#         with:
#           add: 'docs/report'
#           push: true
#           message: ${{env.BOT_COMMIT_MESSAGE}}'

  publish:
    name: Publish
    needs: generate_allure_report
    runs-on: ubuntu-latest

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v2
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
            
