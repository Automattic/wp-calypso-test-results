name: Generate Allure report

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      # Filename of the archive containing latest Allure results to be processed.
      allure_result_filename:
        required: true
        
  # Runs on webhook calls
  repository_dispatch:
    types:
      - webhook

# Allow only one concurrent run/deployment
concurrency:
  group: "pages"
  cancel-in-progress: true
  
env:
  REPORT_PATH: ${{ github.workspace }}/report
  ALLURE_RESULTS_PATH: ${{ github.workspace }}/allure_results
  HISTORY_PATH: ${{ github.workspace }}/history
  
jobs:
  # (Re)generate the Allure report.
  generate:
    name: Generate updated Allure report
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    env:
      GITHUB_TOKEN: ${{ github.token }}

    steps:
      - name: Install allure-commandline package
        run: npm install -g allure-commandline
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        
      - name: Download and untar Allure artifact from S3
        env:
          SOURCE: ${{ secrets.AWS_S3_BUCKET_BASE_URL }}/${{ github.event.inputs.allure_result_filename }}
          DESTINATION: ${{ github.workspace }}/allure-results.tgz
        working-directory: ${{ github.workspace }}
        run: |
          aws s3 cp $SOURCE $DESTINATION
          
          mkdir -p ${{ env.ALLURE_RESULTS_PATH }}
          tar xvfz ${{ env.DESTINATION }} -C ${{ env.ALLURE_RESULTS_PATH }}
      
      - name: Download and untar existing Allure history from S3
        # If this is the first run, there will not be existing history.
        continue-on-error: true
        working-directory: ${{ github.workspace }}
        env:
          SOURCE: ${{ secrets.AWS_S3_BUCKET_BASE_URL }}/history.tgz
          DESTINATION: ${{ github.workspace }}/history.tgz
        run: |
          aws s3 cp $SOURCE $DESTINATION
          
          mkdir -p ${{ env.HISTORY_PATH }}
          tar xvfz ${{ env.DESTINATION }} -C ${{ env.HISTORY_PATH }}
        
      - name: Generate report
        working-directory: ${{ github.workspace }}
        run: |
          if [[ -d "${{ env.HISTORY_PATH }}" ]]; then
              echo "Copying report history to new Allure results data..."
              # Make the "history" directory in the newest Allure results directory.
              mkdir -p ${{ env.ALLURE_RESULTS_PATH }}/history

              # Copy over contents of the "history" directory from the existing report.
              cp -R ${{ env.HISTORY_PATH }}/* ${{ env.ALLURE_RESULTS_PATH }}/history
          else 
              # Fresh run. Allure will generate a fresh report.
              echo "No prior report found."
          fi

          mkdir -p ${{ env.REPORT_PATH }}

          echo "Generating report..."
          allure generate --clean ${{ env.ALLURE_RESULTS_PATH }} --output ${{ env.REPORT_PATH }}
          echo "Finished generating report."

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload the generated report
          path: ${{ env.REPORT_PATH }}
        
      - name: Upload new Allure history to S3
        env:
          SOURCE: ${{ github.workspace }}/history.tgz
          DESTINATION: ${{ secrets.AWS_S3_BUCKET_BASE_URL }}/history.tgz
        run: |
          tar cvfz ${{ env.SOURCE }} -C ${{ env.REPORT_PATH }}/history .

          aws s3 cp $SOURCE $DESTINATION

  # Publish the generated report
  publish:
    name: Publish
    needs: generate
    runs-on: ubuntu-latest

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v2
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
            
